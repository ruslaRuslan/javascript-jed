//-----------------------------------01----------------------------------------------

// Возвращает количество гласных в заданной строке.

// Мы будем считать a, e, i, гласными для этой Ката (но не o) .uy

// Входная строка будет состоять только из строчных букв и/или пробелов.

// let user = prompt('напишите слово или предложение (будет считать гласные a, e, i)')
// const countVowels = (words) => {
//     let vowels = ['a', 'e', 'i']
//     let result = 0
//     for (let char of words) {
//         if (vowels.includes(char)) {
//             result++
//         }
//     }
//     return result
// }
// console.log('Клочество гласных в строке:', countVowels(`${user}`));


//-----------------------------------02----------------------------------------------

// Вам дан массив (длина которого не менее 3, но может быть очень большим), содержащий целые числа. Массив либо полностью состоит из нечетных целых чисел, либо полностью состоит из четных целых чисел, за исключением одного целого числа N. Напишите метод, который принимает массив в качестве аргумента и возвращает этот «выброс» N.

// [2, 4, 0, 100, 4, 11, 2602, 36] -->  11 (the only odd number)
// [160, 3, 1719, 19, 11, 13, -21] --> 160 (the only even number)

// let even = [160, 3, 1719, 19, 11, 13, -21]

// let odd = [2, 4, 0, 100, 4, 11, 2602, 36];

// const findEvenAndOdd = (evenAndOdd) => {
//     const type = evenAndOdd.slice(0, 3).filter(num => num % 2 === 0).length >= 2 ? 'even' : 'odd'
//     for (let num of evenAndOdd) {
//         if ((type === 'even' && num % 2 !== 0) || (type === 'odd' && num % 2 === 0)) {
//             return num
//         }
//     }
// }
// console.log('Выбранное число:', findEvenAndOdd(odd) );

// console.log('Выбранное число:', findEvenAndOdd(even) );

//-----------------------------------03----------------------------------------------

// Добро пожаловать. В этом ката вас просят возвести в квадрат каждую цифру числа и соединить их.

// Например, если мы пропустим через функцию 9119, получится 811181, потому что 9 2 равно 81, а 1 2 равно 1. (81-1-1-81)

// Пример №2: Ввод 765 вернет/должен вернуть 493625, потому что 7 2 равно 49, 6 2 равно 36, а 5 2 равно 25. (49-36-25)

// Примечание. Функция принимает целое число и возвращает целое число.

// const Square = (number) => {
//     let result = ''
//     let numberStr = number.toString()
//     for (let i = 0; i < numberStr.length; i++) {
//         result += numberStr[i] ** 2
//     }
//     return result
// }
// console.log(Square(195));
// console.log(Square(1919));

//-----------------------------------04----------------------------------------------

// Изограмма – это слово, в котором нет повторяющихся букв, как последовательных, так и непоследовательных. Реализуйте функцию, которая определяет, является ли строка, содержащая только буквы, изограммой. Предположим, что пустая строка является изограммой. Не обращайте внимания на регистр букв.

// Пример: (Ввод -> Выход)

// "Дерматоглифика" --> истинное "аба" --> ложное "moOse" --> ложное (игнорировать регистр букв)

// const isIsogram = (word) => {
//     let wordString = word.toString()
//     for (let i = 0; i < wordString.length; i++) {
//         for (let j = i + 1; j < wordString.length; j++) {
//             if (wordString[i] === wordString[j]) {
//                 return false
//             }
//         }
//     }
//     return true
// }
// console.log(isIsogram('salam'));
// console.log(isIsogram('привет'));

//-----------------------------------05----------------------------------------------


// Реализуйте функцию, которая принимает 3 целочисленных значения a, b, c. Функция должна возвращать true, если треугольник можно построить со сторонами заданной длины, и false в любом другом случае.

// (В этом случае все треугольники должны иметь поверхность больше 0, чтобы их можно было принять).

// Примеры:

// Input -> Output
// 1,2,2 -> true
// 4,2,3 -> true
// 2,2,2 -> true
// 1,2,3 -> false
// -5,1,3 -> false
// 0,2,3 -> false
// 1,2,9 -> false

// const threeNumber = (a, b, c) => {
//     if (a <= 0 || b <= 0 || c <= 0) {
//         return false
//     }
//     if (a + b > c && a + c && b + c > a) {
//         return true
//     } else {
//         return false
//     }
// }
// console.log(threeNumber(1, 2, 2));
// console.log(threeNumber(4, 2, 3));
// console.log(threeNumber(2, 2, 2));
// console.log(threeNumber(1, 2, 3));
// console.log(threeNumber(-5, 1, 3));
// console.log(threeNumber(0, 2, 3));
// console.log(threeNumber(1, 2, 9))

//-----------------------------------06----------------------------------------------

// Создайте программу, которая фильтрует список строк и возвращает список, содержащий только имена ваших друзей.

// Если в имени ровно 5 буквы, можете быть уверены, что это ваш друг! В противном случае, вы можете быть уверены, что он не...

// Пример: Ввод = ["Райан", "Киран", "Джейсон", "Ты"], Выход = ["Райан", "Киран", Ты"]

// let friends = ["Райан", "Киран", "Джейсон", "Ты"]

// const friendsMassiv = (friends) => {
//     let result = friends.filter((friend) => friend.length <= 5)
//     return result
// }
// console.log(friendsMassiv(friends));

//-----------------------------------07-----------------------------------------------
// Напишите функцию , persistence которая принимает положительный параметр num и возвращает его мультипликативную устойчивость, которая представляет собой количество раз, которое вы должны умножить цифры, num пока не достигнете одной цифры.

// Например (Ввод -> Выход) :

// const persistence = (num) => {
//     let steps = 0; // Инициализируем переменную для подсчета шагов

//     // Цикл выполняется, пока число num больше или равно 10
//     for (; num >= 10; steps++) {
//         let product = 1; // Инициализируем переменную для хранения произведения цифр числа

//         // Внутренний цикл выполняется, пока num больше 0
//         while (num > 0) {
//             product *= num % 10; // Умножаем product на последнюю цифру числа
//             num = Math.floor(num / 10); // Убираем последнюю цифру из числа
//         }

//         // Если произведение становится однозначным числом, завершаем цикл
//         if (product < 10) {
//             break;
//         }

//         num = product; // Присваиваем num значение произведения для следующей итерации
//     }

//     return steps; // Возвращаем количество шагов
// }

// // Пример использования функции
// console.log(persistence(39)); // Должно вернуть 3
// console.log(persistence(999)); // Должно вернуть 2
// console.log(persistence(4)); // Должно вернуть 0


// ----------------------------------08-----------------------------------------------

// Возьмите 2 строки s1 и s2 включайте только буквы от aдо z. Возвращает новую отсортированную строку, максимально длинную, содержащую отдельные буквы (каждая из которых берется только один раз), исходящие из s1 или s2.

const longestUniqueString = (s1, s2) => {
    const combinedString = (s1, s2).split('');
    const uniqueCharacters = combinedString.filter(char => /[a-z]/i.test(char)).filter((char, index, self) => self.indexOf(char) === index)

    const sortedUniqueCharacters = uniqueCharacters.sort()

    const result = sortedUniqueCharacters.join('')
    return result
}
console.log(longestUniqueString("xyaabbbccccdefww", "xxxxyyyyabklmopq")); //abcdefklmopqwxy

